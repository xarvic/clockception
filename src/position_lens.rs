use druid::Lens;
use std::f64::consts::PI;

pub struct PositionalLens(usize);

impl PositionalLens {
    pub fn new(x: u8, y: u8) -> Self {
        PositionalLens((x + 5 * y) as usize)
    }
    pub fn get(&self, value: u8) -> (f64, f64) {
        let (x, y) = match value {
            0 => POS_0[self.0],
            1 => POS_1[self.0],
            2 => POS_2[self.0],
            3 => POS_3[self.0],
            4 => POS_4[self.0],
            5 => POS_5[self.0],
            6 => POS_6[self.0],
            7 => POS_7[self.0],
            8 => POS_8[self.0],
            9 => POS_9[self.0],
            255 => POS_IDLE[self.0],
            _ => (0.0, 0.0)
        };

        const RATIO: f64 = PI / 2.0;

        (x * RATIO, y * RATIO)
    }
}

impl Lens<u8, (f64, f64)> for PositionalLens {
    fn with<V, F: FnOnce(&(f64, f64)) -> V>(&self, data: &u8, f: F) -> V {
        let inner = self.get(*data);
        f(&inner)
    }

    fn with_mut<V, F: FnOnce(&mut (f64, f64)) -> V>(&self, data: &mut u8, f: F) -> V {
        let mut inner = self.get(*data);
        f(&mut inner)
    }
}

//
const POS_IDLE: [(f64, f64); 30] = [
    (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5),
    (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5),
    (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5),
    (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5),
    (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5),
    (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5), (1.5, 1.5),
];

const POS_0: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_1: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_2: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_3: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_4: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_5: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_6: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_7: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_8: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];

const POS_9: [(f64, f64); 30] = [
    (0.0, 1.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (1.0, 2.0),
    (3.0, 1.0), (0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 1.0), (1.5, 1.5), (1.0, 3.0), (1.0, 3.0),
    (3.0, 1.0), (3.0, 0.0), (0.0, 2.0), (3.0, 2.0), (1.0, 3.0),
    (3.0, 0.0), (0.0, 2.0), (0.0, 2.0), (0.0, 2.0), (3.0, 2.0),
];
